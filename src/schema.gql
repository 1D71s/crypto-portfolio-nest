# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserEntity {
  id: Float!
  name: String!
  email: String!
  password: String!
}

type MessageEntity {
  message: String!
}

type TransactionEntity {
  id: Float!
  coin: String!
  operation: Boolean!
  price: Float!
  spent: Float!
  spentCoin: Float!
  date: DateTime!
  authorId: Float!
  portfolioId: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PortfolioEntity {
  id: Float!
  name: String!
  authorId: Float!
}

type PortfolioWithTransactionEntity {
  id: Float!
  name: String!
  authorId: Float!
  transactions: [TransactionEntity!]!
}

type TokenEntity {
  token: String!
}

type Different24hEndity {
  procent: Float!
  usd: Float!
}

type ItemStatisticEndity {
  coin: String!
  now: Float!
  different24h: Different24hEndity!
  start: Float!
  coinState: Float!
  profitProcent: Float!
  profitUsd: Float!
}

type FullStatisticEndity {
  totalStart: Float!
  totalNow: Float!
  different24h: Different24hEndity!
  differentProcent: Float!
  differentUsd: Float!
  coins: [ItemStatisticEndity!]!
}

type ChartStateForResult {
  coinState: Float!
  date: DateTime!
}

type Query {
  getUserById(id: String!): UserEntity!
  getAllUsers: [UserEntity!]!
  login(input: LoginAuthInput!): TokenEntity!
  getme: UserEntity!
  getAllUserPortfolio: [PortfolioWithTransactionEntity!]!
  getOnePortfolio(input: IdPortfolioInput!): PortfolioWithTransactionEntity!
  getTotalProfitPortfolio(input: IdPortfolioInput!): FullStatisticEndity!
  getTotalProfitOneCrypto(input: GetProfitOneCryptoDto!): ItemStatisticEndity!
  getOneTransaction(input: IdInput!): TransactionEntity!
  getAllTransactionInPortfolio(input: IdInput!): [TransactionEntity!]!
  calculateTotalProfitChart(input: IdPortfolioInput!): [ChartStateForResult!]!
}

input LoginAuthInput {
  email: String!
  password: String!
}

input IdPortfolioInput {
  id: Float!
}

input GetProfitOneCryptoDto {
  id: Float!
  coin: String!
}

input IdInput {
  id: Float!
}

type Mutation {
  registration(input: CreateAuthInput!): TokenEntity!
  createPortfolio(input: CreatePortfolioInput!): PortfolioEntity!
  updatePortfolio(input: UpdatePortfolioInput!): PortfolioEntity!
  deletePortfolio(input: IdPortfolioInput!): MessageEntity!
  addTransaction(input: AddTransactionInput!): TransactionEntity!
  editTransaction(input: UpdateTransactionInput!): TransactionEntity!
  deleteTransaction(input: IdInput!): MessageEntity!
}

input CreateAuthInput {
  email: String!
  name: String!
  password: String!
}

input CreatePortfolioInput {
  name: String!
}

input UpdatePortfolioInput {
  id: Float!
  name: String!
}

input AddTransactionInput {
  coin: String!
  operation: Boolean!
  price: Float!
  spent: Float!
  date: String!
  portfolioId: Float!
}

input UpdateTransactionInput {
  id: Float!
  coin: String!
  operation: Boolean!
  price: Float!
  spent: Float!
  date: String!
}